#!/usr/bin/env ruby

require 'optparse'
require 'pp'

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), "/../lib"))
require 'reddwatch'

opts = {}

if ARGV.length < 1 then ARGV << "-h" end

OptionParser.new do |o|
  o.banner = "USAGE: #{$PROGRAM_NAME} [options] [subreddit|multi|list]"

  o.separator ""

  o.on("--init", "Initialise ReddWatch.") do
    Reddwatch.send(:init)
  end

  o.on("--server", "Start Reddwatch server.") do
    Reddwatch::Server.send(:start)
  end

  o.on("--start", "Start Reddwatch watcher.") do
    opts[:start] = true
  end

  o.on("--stop", "Stop Reddwatch watcher.") do
    opts[:stop] = true
  end

  o.on("--status", "Print status of Reddwatch watcher as a notification.") do
    opts[:status] = true
  end

  o.on("--restart", "Restarts the Reddwatch server.") do
    opts[:restart] = true
  end

  o.separator ""

  o.on("-L", "--list-lists", "List all created watch lists.") do
    # List lists
    opts[:llist] = true
  end

  o.on("-C", "--create-list NAME", "Create a new watch list.") do |c|
    opts[:create] = c
  end

  o.on("-W", "--watch-list NAME", "Watch named list.") do |w|
    opts[:watch] = w
  end

  o.on("-D", "--delete-list", "Delete named list.") do |d|
    opts[:delete] = d
  end

  o.separator ""

  o.on("-l", "--list-watching", "List all subreddits in the current list.") do
    opts[:list] = true
  end

  o.on("-s", "--subscribe SUBREDDIT[,SUBREDDIT,SUBREDDIT,...]", Array, \
       "Comma-separated list of subreddits to watch.") do |s|
    pp s
    opts[:subscribe] = s
  end

  o.on("-u", "--unsubscribe SUBREDDIT[,SUBREDDIT,SUBREDDIT,...]", Array, \
       "Comma-separated list of subreddits to stop watching.") do |u|
    opts[:unsubscribe] = u
  end

  o.on("-c", "--clear", "Clear all subreddits from the current list.") do
    opts[:clear] = true
  end

  o.separator ""

  o.on_tail("-v", "--version", "Show version information.") do |v|
    puts "Reddwatch v#{Reddwatch::VERSION}"
    exit(0)
  end

  o.on("-h", "--help", "Show this message.") do |h|
    puts o
    exit(0)
  end
end.parse!

pp opts
Reddwatch::Client.execute(opts)
